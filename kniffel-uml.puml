@startuml

interface GameInterface {
    +startGame()
    +nextTurn()
    +isGameOver(): boolean
    +getCurrentPlayer(): Player
}

class Game implements GameInterface {
    -players: List<Player>
    -currentPlayerIndex: int
    -gameOver: boolean
    -diceList: List<Dice>
    -rollsLeft: int
    +startGame()
    +nextTurn()
    +isGameOver(): boolean
    +getCurrentPlayer(): Player
    +getDiceList(): List<Dice>
    +getRollsLeft(): int
    +rollDice(toRoll: boolean[]): void
    +resetDice(): void
}

abstract class Player {
    #name: String
    #score: int
    #categoryScores: Map<Category, Integer>
    #usedCategories: Map<Category, Boolean>
    +addScore(cat: Category, points: int)
    +isCategoryUsed(cat: Category): boolean
    +getCategoryScore(cat: Category): int
    +allCategoriesUsed(): boolean
    +reset(): void
    +takeTurn(): void
}

class PersonPlayer extends Player {
    +takeTurn(): void
}

class ComputerPlayer extends Player {
    +takeTurn(): void
}

class Dice {
    -value: int
    -held: boolean
    +roll(): void
    +getValue(): int
    +isHeld(): boolean
    +setHeld(held: boolean): void
}

enum Category {
    ONES, TWOS, THREES, FOURS, FIVES, SIXES,
    THREE_OF_A_KIND, FOUR_OF_A_KIND, FULL_HOUSE,
    SMALL_STRAIGHT, LARGE_STRAIGHT, KNIFFEL, CHANCE
}

class KniffelScorer {
    +calculateScore(cat: Category, dice: List<Dice>): int
}

GameInterface <|.. Game
Game "1" o-- "*" Player
Game "1" o-- "*" Dice
Player <|-- PersonPlayer
Player <|-- ComputerPlayer

@enduml
